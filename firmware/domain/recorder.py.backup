#!/usr/bin/env python3
# recorder.py - PiStreamer with FFmpeg (HLS + File Recording)
import os
import time
import signal
from datetime import datetime
from pathlib import Path
import sys
import subprocess
import re

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from flask import Flask, Response
from firmware.hal.usb_manager import USBManager    
from firmware.hal.gpio_leds import gpioLed
from firmware.hal.gnss import GNSSModule
from firmware.hal.rtc import rtcModule
from firmware.hal.micro import Micro
from firmware.config.config_loader import load

class PiStreamer:
    def __init__(self,
                 video_dev=0,  # Index for OpenCV
                 audio_dev="hw:1,0",
                 output_dir="/media/ssd",
                 hls_dir="/tmp/picam_hls",  # HLS output directory
                 segment_seconds=30,  # Short for test
                 led_pin=26):
        self.video_dev = video_dev
        self.audio_dev = audio_dev
        self.output_dir = output_dir
        self.hls_dir = hls_dir
        self.segment_seconds = segment_seconds
        
        # Tạo HLS directory nếu chưa có
        Path(self.hls_dir).mkdir(parents=True, exist_ok=True)
        self.config_file = Path(__file__).parent.parent / 'config' / 'device_full.yaml'
        self.config = load(self.config_file)
        self.led_control = gpioLed(self.config['gpio'].get('record_led', 26))
        self.led_thread = None
        self.led_running = False
        
        # Init RTC and GNSS
        try:
            self.rtc = rtcModule()
            self.rtc_available = True
            print("✅ RTC module khởi tạo thành công")
        except Exception as e:
            print(f"⚠️ Không thể khởi tạo RTC: {e}")
            self.rtc_available = False

        try:
            if self.config['capabilities'].get('gnss', False):
                self.gnss = GNSSModule()
                self.gnss_available = True
                print("✅ GNSS module khởi tạo thành công")
            else:
                print("ℹ️ GNSS không được bật trong cấu hình")
                self.gnss_available = False
        except Exception as e:
            print(f"⚠️ Không thể khởi tạo GNSS: {e}")
            self.gnss_available = False

        self._stop_flag = False
        self.cap = None
        self.video_writer = None
        self.audio_writer = None
        self.current_segment = None
        self.segment_start = None
        self.audio_frames = []  # Buffer for audio frames
        self.audio_device_index = None
        self.micro = None

        # Flask app for serving HLS stream
        self.app = Flask(__name__)
        self.app.debug = False
        
        # No SocketIO needed for HLS
        self.hls_process = None  # FFmpeg process for HLS streaming

    def check_liscam(self):
        """Tìm index camera hoạt động - đơn giản như Flask example"""
        for cam in range(10):  # Thử lên đến /dev/video9
            cap = cv2.VideoCapture(cam)
            if cap.isOpened():
                cap.release()
                print(f"✅ Tìm thấy camera tại index {cam}")
                return cam
        print("❌ Không tìm thấy camera nào hoạt động!")
        return 0  # Fallback

    def initial(self):
        """Khởi tạo các thông số từ file cấu hình"""
        try:
            # Khởi tạo USB Storage Manager
            self.usb_manager = USBManager(
                path=self.config['paths']['record_root'],
                min_free_gb=self.config['storage'].get('min_free_gb', 1.0),
                min_free_percent=self.config['storage'].get('min_free_percent', 10),
                camera_id=self.config['device'].get('id', 'PICAM-DEFAULT')
            )
            
            # Kiểm tra và đợi USB storage
            if not self.usb_manager.is_available():
                print("⚠️ Đang đợi USB storage...")
                # Bắt đầu nhấp nháy LED khi không có USB
                self._start_led_blink()
                self.usb_manager.wait_until_available()
                # Dừng nhấp nháy khi đã có USB
                self._stop_led_blink()
            
            # Kiểm tra dung lượng trống
            if not self.usb_manager.has_enough_space():
                print("⚠️ Dung lượng trống không đủ, đang dọn dẹp...")
                self.usb_manager.cleanup_old_files()
                if not self.usb_manager.has_enough_space():
                    raise Exception("Không đủ dung lượng trống sau khi dọn dẹp")
            
            print("✅ USB Storage sẵn sàng")
            
            # Cấu hình video - sử dụng index thay vì path
            self.video_index = self.check_liscam()  # Lưu index int
            self.video_size = self.config['video']['v4l2_format']  # e.g., '640x480'
            self.video_fps = self.config['video']['v4l2_fps']
            width, height = map(int, self.video_size.split('x'))
            self.video_width = width
            self.video_height = height

            # Cấu hình audio nếu được bật
            if self.config['capabilities'].get('audio', False):
                self.micro = Micro()
                device_str = self.micro.get_first_available_device()
                
                if device_str:
                    # Parse device string
                    # Có thể là: "hw:1,0" hoặc "[1] HD camera: USB Audio (hw:1,0)"
                    self.audio_device_index = None
                    
                    # Case 1: Format "[index] name (hw:x,y)"
                    if device_str.startswith('['):
                        try:
                            parts = device_str.split(']')[0].split('[')
                            if len(parts) > 1:
                                self.audio_device_index = int(parts[1].strip())
                        except:
                            pass
                    
                    # Case 2: Just "hw:x,y" - need to find index by querying PyAudio
                    if self.audio_device_index is None and device_str.startswith('hw:'):
                        # Parse hw:x,y to get card and device numbers
                        try:
                            hw_parts = device_str.replace('hw:', '').split(',')
                            card_num = int(hw_parts[0])
                            
                            # Find PyAudio device index by searching for matching ALSA name
                            import pyaudio
                            p = pyaudio.PyAudio()
                            try:
                                for i in range(p.get_device_count()):
                                    info = p.get_device_info_by_index(i)
                                    name = info.get('name', '').lower()
                                    # Check if device name contains "hw:x,y" pattern
                                    if f"hw:{card_num}" in name.lower() or f"card{card_num}" in name.lower():
                                        if info.get('maxInputChannels', 0) > 0:
                                            self.audio_device_index = i
                                            print(f"   ↳ Tìm thấy PyAudio device index: {i} ({info['name']})")
                                            break
                            finally:
                                p.terminate()
                        except Exception as e:
                            print(f"⚠️ Lỗi parse hw string: {e}")
                    
                    self.audio_dev = device_str  # Giữ config cho log
                    
                    if self.audio_device_index is None:
                        print(f"⚠️ Không thể tìm PyAudio device index từ: {device_str}")
                        self.audio_device_index = None
                    else:
                        # Kiểm tra device có hỗ trợ sample rate từ config không
                        p = pyaudio.PyAudio()
                        try:
                            device_info = p.get_device_info_by_index(self.audio_device_index)
                            print(f"   ↳ Device info: {device_info.get('name')}")
                            print(f"   ↳ Max input channels: {device_info.get('maxInputChannels')}")
                            print(f"   ↳ Default sample rate: {device_info.get('defaultSampleRate')}Hz")
                            
                            # Kiểm tra số channels hỗ trợ
                            max_channels = int(device_info.get('maxInputChannels', 0))
                            if max_channels == 0:
                                print(f"⚠️ Device không hỗ trợ input")
                                self.audio_device_index = None
                            else:
                                # Chọn channels phù hợp
                                config_channels = self.config['audio'].get('channels', 1)
                                self.audio_channels = min(config_channels, max_channels)
                                
                                # Lấy default sample rate từ thiết bị
                                default_rate = int(device_info.get('defaultSampleRate', 44100))
                                
                                # Thử default rate trước (thường là rate device hỗ trợ tốt nhất)
                                supported_rates = [default_rate, 44100, 48000, 16000, 22050, 32000, 8000, 11025]
                                # Loại bỏ duplicate
                                supported_rates = list(dict.fromkeys(supported_rates))
                                
                                self.audio_rate = None
                                for rate in supported_rates:
                                    # Thử với cả mono và stereo
                                    for test_channels in [self.audio_channels, 1, 2]:
                                        if test_channels > max_channels:
                                            continue
                                        try:
                                            # Test với input stream
                                            test_stream = p.open(
                                                format=pyaudio.paInt16,
                                                channels=test_channels,
                                                rate=rate,
                                                input=True,
                                                input_device_index=self.audio_device_index,
                                                frames_per_buffer=1024,
                                                start=False
                                            )
                                            test_stream.close()
                                            self.audio_rate = rate
                                            self.audio_channels = test_channels
                                            print(f"   ✅ Tìm thấy cấu hình phù hợp: {rate}Hz, {test_channels}ch")
                                            break
                                        except Exception as e:
                                            # Debug: in ra lỗi cụ thể
                                            if "Invalid sample rate" in str(e):
                                                pass  # Rate không hỗ trợ, thử rate khác
                                            continue
                                    if self.audio_rate is not None:
                                        break
                                
                                if self.audio_rate is None:
                                    print(f"⚠️ Không tìm được sample rate phù hợp")
                                    print(f"   ↳ Thử các rate: {supported_rates}")
                                    print(f"   ↳ Default rate của device: {default_rate}Hz")
                                    self.audio_device_index = None
                        except Exception as e:
                            print(f"⚠️ Lỗi kiểm tra device: {e}")
                            self.audio_device_index = None
                        finally:
                            p.terminate()
                else:
                    self.audio_device_index = None
                    print("⚠️ Không tìm thấy thiết bị audio.")
                
                # Kiểm tra cuối cùng
                if self.audio_device_index is not None and hasattr(self, 'audio_rate'):
                    print(f"   ↳ Audio config: {self.audio_channels}ch @ {self.audio_rate}Hz")
                else:
                    self.audio_device_index = None
                    print("   ✖️ Audio: Không thể khởi tạo")
            else:
                self.audio_device_index = None
            
            # Cấu hình lưu trữ
            self.output_dir = self.config['paths']['record_root']
            self.segment_seconds = self.config['storage']['segment_seconds']
            
            # Đảm bảo thư mục tồn tại
            os.makedirs(self.output_dir, exist_ok=True)
            os.makedirs(self.hls_dir, exist_ok=True)
            
            print("✅ Đã khởi tạo cấu hình:")
            print(f"   ↳ Video: index {self.video_index} ({self.video_size} @ {self.video_fps}fps)")
            if hasattr(self, 'audio_dev') and self.audio_device_index is not None:
                print(f"   ↳ Audio: {self.audio_dev} (index {self.audio_device_index}, {self.audio_channels}ch @ {self.audio_rate}Hz)")
            else:
                print("   ✖️ Audio: Không có thiết bị audio")
            print(f"   ↳ Storage: {self.output_dir}")
            print(f"   ↳ Segment: {self.segment_seconds}s")
            
            # Setup Flask routes (always setup broadcast thread)
            self.setup_flask_routes()
            print("   ✅ Flask routes đã được thiết lập")
            return True
            
        except KeyError as e:
            print(f"❌ Lỗi cấu hình: Thiếu thông số {e}")
            return False
        except Exception as e:
            print(f"❌ Lỗi khởi tạo: {e}")
            return False

    def _get_rtc_time(self):
        """Đọc thời gian từ RTC module"""
        try:
            if self.rtc_available:
                rtc_time = self.rtc.read_time()
                return rtc_time.strftime("%Y-%m-%d %H:%M:%S")
            else:
                return datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        except Exception as e:
            # print(f"⚠️ Lỗi đọc RTC: {e}")
            return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    def _get_gps_info(self):
        """Đọc thông tin GPS từ GNSS module"""
        try:
            if self.gnss_available:
                gps_data = self.gnss.get_location()
                if gps_data and gps_data.get('fix_quality', 0) > 0:
                    lat = gps_data.get('latitude', 0)
                    lon = gps_data.get('longitude', 0)
                    speed = gps_data.get('speed', 0)
                    alt = gps_data.get('altitude', 0)
                    sats = gps_data.get('satellites', 0)
                    return f"GPS: {lat:.6f}, {lon:.6f} | Alt: {alt:.1f}m | Spd: {speed:.1f}km/h | Sats: {sats}"
                return "GPS: Chờ tín hiệu"
            return None
        except Exception as e:
            print(f"⚠️ Lỗi đọc GPS: {e}")
            return None

    def _get_overlay_text(self):
        """Lấy text overlay (thay vì file, dùng direct cho OpenCV)"""
        timestamp = self._get_rtc_time()
        gps_info = self._get_gps_info() or "GPS: Waiting for signal"
        return f"{timestamp}\n{gps_info}"

    def setup_flask_routes(self):
        """Setup Flask routes for HLS streaming"""
        
        # Only register routes once
        if '/' not in [rule.rule for rule in self.app.url_map.iter_rules()]:
            @self.app.route('/')
            def index():
                return {"status": "PiStreamer running", "hls_url": "/hls/stream.m3u8"}
            
            @self.app.route('/hls/<path:filename>')
            def serve_hls(filename):
                """Serve HLS playlist and segments"""
                from flask import send_from_directory
                return send_from_directory(self.hls_dir, filename)
            
            @self.app.route('/health')
            def health():
                return {
                    "status": "ok",
                    "hls_enabled": self.hls_process is not None and self.hls_process.poll() is None,
                    "recording": not self._stop_flag
                }
    
    def _start_hls_stream(self):
        """Start FFmpeg để ghi file MP4 và stream HLS đồng thời"""
        import subprocess
        
        # Stop existing FFmpeg process
        if self.hls_process and self.hls_process.poll() is None:
            self.hls_process.terminate()
            self.hls_process.wait(timeout=5)
        
        # Clear old HLS files
        for f in Path(self.hls_dir).glob("*.ts"):
            try:
                f.unlink()
            except:
                pass
        for f in Path(self.hls_dir).glob("*.m3u8"):
            try:
                f.unlink()
            except:
                pass
        
        # Tạo tên file output cho segment hiện tại
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"{self.output_dir}/{timestamp}_cam0.mp4"
        
        # Build FFmpeg command
        # Input: Video từ V4L2
        cmd = [
            'ffmpeg',
            '-f', 'v4l2',
            '-input_format', 'mjpeg',
            '-video_size', f'{self.video_width}x{self.video_height}',
            '-framerate', str(self.video_fps),
            '-i', f'/dev/video{self.video_index}',
        ]
        
        # Input: Audio nếu có
        if self.audio_device_index is not None:
            # Tìm ALSA device name từ PyAudio index
            import pyaudio
            p = pyaudio.PyAudio()
            try:
                device_info = p.get_device_info_by_index(self.audio_device_index)
                device_name = device_info.get('name', '')
                
                # Parse để lấy hw:x,y format
                alsa_device = "hw:1,0"  # Default
                if 'hw:' in device_name.lower():
                    # Extract hw:x,y from name
                    import re
                    match = re.search(r'hw:(\d+),(\d+)', device_name, re.I)
                    if match:
                        alsa_device = f"hw:{match.group(1)},{match.group(2)}"
                
                cmd.extend([
                    '-f', 'alsa',
                    '-channels', str(self.audio_channels),
                    '-sample_rate', str(self.audio_rate),
                    '-i', alsa_device,
                ])
                print(f"   ↳ Audio input: {alsa_device} ({self.audio_channels}ch @ {self.audio_rate}Hz)")
            except Exception as e:
                print(f"   ⚠️ Không thể thêm audio input: {e}")
            finally:
                p.terminate()
        
        # Codec settings
        cmd.extend([
            '-c:v', 'libx264',
            '-preset', 'ultrafast',
            '-tune', 'zerolatency',
            '-g', str(self.video_fps * 2),  # Keyframe every 2 seconds
            '-sc_threshold', '0',
            '-b:v', '1000k',
            '-maxrate', '1200k',
            '-bufsize', '2400k',
        ])
        
        # Audio codec (nếu có audio input)
        if self.audio_device_index is not None:
            cmd.extend([
                '-c:a', 'aac',
                '-b:a', '128k',
            ])
        
        # Output 1: MP4 file (segment length)
        cmd.extend([
            '-f', 'segment',
            '-segment_time', str(self.segment_seconds),
            '-segment_format', 'mp4',
            '-reset_timestamps', '1',
            '-strftime', '1',
            output_file.replace(timestamp, '%Y%m%d_%H%M%S'),
        ])
        
        # Output 2: HLS stream
        cmd.extend([
            '-f', 'hls',
            '-hls_time', '2',
            '-hls_list_size', '10',
            '-hls_flags', 'delete_segments',
            '-hls_segment_filename', f'{self.hls_dir}/segment_%03d.ts',
            f'{self.hls_dir}/stream.m3u8',
        ])
        
        print(f"🎬 Starting FFmpeg (Record + HLS)...")
        print(f"   ↳ Command: {' '.join(cmd)}")
        
        try:
            self.hls_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                stdin=subprocess.DEVNULL
            )
            print(f"✅ FFmpeg started (PID: {self.hls_process.pid})")
            print(f"   ↳ Recording: {self.output_dir}/*.mp4")
            print(f"   ↳ HLS Stream: http://localhost:5000/hls/stream.m3u8")
        except Exception as e:
            print(f"❌ Failed to start FFmpeg: {e}")
            self.hls_process = None

    def _mux_to_mp4(self):
        """Ghép AVI + WAV thành MP4 bằng ffmpeg_merge_video_audio"""
        if not hasattr(self, 'segment_manager'):
            return
            
        paths = self.segment_manager.get_current_paths()
        video_file = paths['video']
        audio_file = paths['audio']
        mp4_file = paths['output']
        
        if not os.path.exists(video_file):
            print("⚠️ Không có file video để ghép.")
            return

        # Đợi file được flush hoàn toàn
        time.sleep(0.5)
        
        merge_success = False
        try:
            # Sử dụng ffmpeg_merge_video_audio để ghép
            if os.path.exists(audio_file):
                # Ghép video và audio
                ffmpeg_merge_video_audio(
                    video_file,
                    audio_file,
                    mp4_file,
                    video_codec="libx264",
                    audio_codec="aac",
                )
                print(f"✅ Ghép thành công: {mp4_file} (video AVI + audio WAV)")
            else:
                # Chỉ convert video sang MP4 không có audio
                ffmpeg_merge_video_audio(
                    video_file,
                    None,
                    mp4_file,
                    video_codec="libx264",
                    audio_codec="aac",
                )
                print(f"✅ Convert thành công: {mp4_file} (video only)")
            
            merge_success = True
                
        except Exception as e:
            print(f"⚠️ Lỗi ghép MP4: {e}")
            # Xóa file MP4 lỗi nếu có
            if os.path.exists(mp4_file):
                try:
                    os.remove(mp4_file)
                    print(f"   ↳ Đã xóa file MP4 lỗi: {mp4_file}")
                except Exception as e2:
                    print(f"⚠️ Lỗi xóa file MP4: {e2}")
        
        # LUÔN thử xóa source files (dù merge thành công hay thất bại)
        finally:
            # Đợi thêm chút để đảm bảo ffmpeg đã release file
            time.sleep(0.3)
            
            deleted_files = []
            failed_files = []
            
            # Xóa video file
            if os.path.exists(video_file):
                try:
                    os.remove(video_file)
                    deleted_files.append(f"video: {os.path.basename(video_file)}")
                except Exception as e:
                    failed_files.append(f"video: {e}")
            
            # Xóa audio file
            if os.path.exists(audio_file):
                try:
                    os.remove(audio_file)
                    deleted_files.append(f"audio: {os.path.basename(audio_file)}")
                except Exception as e:
                    failed_files.append(f"audio: {e}")
            
            # Report cleanup status
            if deleted_files:
                print(f"   ↳ Đã xóa: {', '.join(deleted_files)}")
            if failed_files:
                print(f"   ⚠️ Không xóa được: {', '.join(failed_files)}")
            
            # Nếu không có file MP4 sau merge thành công, cảnh báo
            if merge_success and not os.path.exists(mp4_file):
                print(f"   ⚠️ Cảnh báo: File MP4 không tồn tại sau merge!")

    def _audio_thread(self):
        """Thread đọc và ghi audio độc lập với auto-reconnect"""
        if self.audio_device_index is None:
            print("⚠️ Không có thiết bị audio, audio thread không chạy")
            return

        # Cấu hình từ device detection
        CHUNK = 1024
        FORMAT = pyaudio.paInt16
        CHANNELS = getattr(self, 'audio_channels', 1)
        RATE = getattr(self, 'audio_rate', 48000)
        
        reconnect_attempts = 0
        max_reconnect = 3
        stream = None
        p = None
        
        def init_audio():
            """Khởi tạo hoặc khởi tạo lại audio stream - tối ưu cho Pi5"""
            try:
                new_p = pyaudio.PyAudio()
                
                # Thêm delay nhỏ để tránh audio device lock trên Pi5
                time.sleep(0.2)
                
                new_stream = new_p.open(
                    format=FORMAT,
                    channels=CHANNELS,
                    rate=RATE,
                    frames_per_buffer=CHUNK,
                    input=True,
                    input_device_index=self.audio_device_index,
                    start=False  # Không start ngay, start sau
                )
                
                # Start stream sau khi khởi tạo
                new_stream.start_stream()
                
                # Test đọc một chunk để chắc chắn hoạt động
                try:
                    test_data = new_stream.read(CHUNK, exception_on_overflow=False)
                    if test_data:
                        print(f"   ✅ Audio test OK: {len(test_data)} bytes")
                        return new_p, new_stream
                except Exception as e:
                    print(f"   ⚠️ Audio test failed: {e}")
                    new_stream.close()
                    new_p.terminate()
                    return None, None
                    
                return new_p, new_stream
            except Exception as e:
                print(f"   ❌ Lỗi init audio: {e}")
                if 'new_p' in locals():
                    try:
                        new_p.terminate()
                    except:
                        pass
                return None, None
        
        # Khởi tạo audio stream lần đầu
        p, stream = init_audio()
        
        if stream is None:
            print(f"⚠️ Không thể mở audio stream")
            print("   ↳ Audio recording sẽ bị tắt, chỉ ghi video")
            return
        
        print(f"✅ Khởi tạo audio stream thành công ({RATE}Hz, {CHANNELS} channels)")

        # Đảm bảo có SegmentManager và segment đã được bắt đầu
        if not hasattr(self, 'segment_manager'):
            self.segment_manager = SegmentManager(self.output_dir, self.segment_seconds)
            
        # Đợi segment được khởi tạo bởi video thread
        wait_start = time.time()
        while self.segment_manager.current_segment is None:
            if time.time() - wait_start > 5:  # Timeout sau 5 giây
                print("⚠️ Timeout chờ video thread khởi tạo segment")
                return
            time.sleep(0.1)

        # Bắt đầu ghi audio vào segment hiện tại
        current_segment = self.segment_manager.get_current_paths()['audio']
        current_writer = wave.open(current_segment, 'wb')
        current_writer.setnchannels(CHANNELS)
        current_writer.setsampwidth(p.get_sample_size(FORMAT))  # 16-bit PCM
        current_writer.setframerate(RATE)
        audio_frames = []  # Initialize array to store frames

        while not self._stop_flag:
            # Kiểm tra stream còn hoạt động không
            if stream is None or not stream.is_active():
                print("⚠️ Audio stream không khả dụng, thử reconnect...")
                
                # Đóng stream hiện tại
                try:
                    if stream:
                        stream.stop_stream()
                        stream.close()
                    if p:
                        p.terminate()
                    time.sleep(1)
                except:
                    pass
                
                # Thử reconnect
                reconnect_attempts += 1
                if reconnect_attempts > max_reconnect:
                    print(f"❌ Đã thử reconnect audio {max_reconnect} lần thất bại, dừng audio thread")
                    break
                
                print(f"🔄 Đang reconnect audio... (lần {reconnect_attempts}/{max_reconnect})")
                p, stream = init_audio()
                
                if stream is None:
                    print("❌ Reconnect audio thất bại, thử lại sau 2 giây...")
                    time.sleep(2)
                    continue
                else:
                    print("✅ Reconnect audio thành công!")
                    reconnect_attempts = 0
                    continue
            
            try:
                data = stream.read(CHUNK, exception_on_overflow=False)
                audio_frames.append(data)
                
                # Reset reconnect counter khi đọc thành công
                reconnect_attempts = 0
                
                # Kiểm tra segment mới
                if self.segment_manager.should_start_new():
                    # Ghi toàn bộ frames vào file WAV
                    current_writer.writeframes(b''.join(audio_frames))
                    current_writer.close()
                    self.segment_manager.mark_complete('audio')
                    
                    # Đợi video hoàn thành và ghép file
                    if self.segment_manager.wait_for_merge(timeout=1.0):
                        self._mux_to_mp4()
                    
                    # Bắt đầu segment mới
                    current_segment = self.segment_manager.get_current_paths()['audio']
                    current_writer = wave.open(current_segment, 'wb')
                    current_writer.setnchannels(CHANNELS)
                    current_writer.setsampwidth(p.get_sample_size(FORMAT))
                    current_writer.setframerate(RATE)
                    audio_frames = []  # Reset frame buffer
                    
            except Exception as e:
                # Kiểm tra lỗi stream closed
                if "Stream closed" in str(e) or "errno -9988" in str(e).lower():
                    print(f"⚠️ Audio stream bị đóng: {e}")
                    stream = None  # Force reconnect ở lần lặp tiếp theo
                    time.sleep(0.5)
                else:
                    print(f"⚠️ Lỗi đọc audio: {e}")
                    time.sleep(0.1)

        # Ghi nốt phần cuối
        try:
            if audio_frames and current_writer:
                current_writer.writeframes(b''.join(audio_frames))
            if current_writer:
                current_writer.close()
        except Exception as e:
            print(f"⚠️ Lỗi đóng audio writer: {e}")
            
        self.segment_manager.mark_complete('audio')
        
        # Cleanup
        try:
            if stream:
                stream.stop_stream()
                stream.close()
            if p:
                p.terminate()
        except Exception as e:
            print(f"⚠️ Lỗi cleanup audio: {e}")
            
        print("✅ Audio thread stopped.")

    def _video_thread(self):
        """Thread đọc và ghi video độc lập với auto-reconnect"""
        cap = None
        reconnect_attempts = 0
        max_reconnect = 5
        
        def init_camera():
            """Khởi tạo hoặc khởi tạo lại camera - tối ưu cho Pi5"""
            try:
                # Thử release camera cũ trước (Pi5 cần cleanup kỹ)
                if hasattr(self, 'cap') and self.cap is not None:
                    try:
                        self.cap.release()
                    except:
                        pass
                
                # Đợi driver reset
                time.sleep(0.5)
                
                # Khởi tạo camera với MMAL backend (tốt hơn cho Pi5)
                new_cap = cv2.VideoCapture(self.video_index, cv2.CAP_V4L2)
                
                if new_cap.isOpened():
                    # Set resolution
                    new_cap.set(cv2.CAP_PROP_FRAME_WIDTH, self.video_width)
                    new_cap.set(cv2.CAP_PROP_FRAME_HEIGHT, self.video_height)
                    
                    # Giảm buffer để tránh memory issues trên Pi5
                    new_cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
                    
                    # Test read một frame để chắc chắn hoạt động
                    ret, test_frame = new_cap.read()
                    if ret:
                        print(f"   ✅ Camera test OK: {test_frame.shape}")
                        return new_cap
                    else:
                        print("   ⚠️ Camera không đọc được frame test")
                        new_cap.release()
                        return None
                return None
            except Exception as e:
                print(f"   ❌ Lỗi init camera: {e}")
                return None
        
        # Khởi tạo camera lần đầu
        cap = init_camera()
        self.cap = cap  # Lưu reference để cleanup sau
        
        if cap is None:
            print("❌ Không mở được camera!")
            return
        
        # Khởi tạo SegmentManager nếu chưa có
        if not hasattr(self, 'segment_manager'):
            self.segment_manager = SegmentManager(self.output_dir, self.segment_seconds)
            
        # Bắt đầu segment đầu tiên
        current_segment = self.segment_manager.start_new_segment()
        current_writer = cv2.VideoWriter(
            f"{current_segment}.avi",
            cv2.VideoWriter_fourcc(*'XVID'),
            self.video_fps,
            (self.video_width, self.video_height)
        )

        while not self._stop_flag:
            # Kiểm tra camera còn hoạt động không
            if cap is None or not cap.isOpened():
                print("⚠️ Camera không khả dụng, thử reconnect...")
                print(f"   ↳ cap={cap}, isOpened={cap.isOpened() if cap else 'N/A'}")
                
                # Đóng camera hiện tại nếu có
                try:
                    if cap is not None:
                        cap.release()
                    time.sleep(1)  # Đợi driver reset
                except Exception as e:
                    print(f"   ⚠️ Lỗi release camera cũ: {e}")
                
                # Thử reconnect
                reconnect_attempts += 1
                if reconnect_attempts > max_reconnect:
                    print(f"❌ Đã thử reconnect {max_reconnect} lần thất bại, dừng video thread")
                    break
                
                print(f"🔄 Đang reconnect camera... (lần {reconnect_attempts}/{max_reconnect})")
                cap = init_camera()
                self.cap = cap
                
                if cap is None:
                    print("❌ Reconnect thất bại, thử lại sau 2 giây...")
                    time.sleep(2)
                    continue
                else:
                    print("✅ Reconnect camera thành công!")
                    reconnect_attempts = 0  # Reset counter khi thành công
                    continue
            
            # Đọc frame với timeout protection (Pi5 có thể hang ở đây)
            try:
                ret, frame = cap.read()
                if not ret or frame is None:
                    print(f"⚠️ Không đọc được frame (cap.isOpened={cap.isOpened() if cap else 'None'})")
                    # Không ngay lập tức reconnect, có thể chỉ là frame skip
                    reconnect_attempts += 1
                    if reconnect_attempts > 3:
                        print("   ↳ Quá nhiều frame lỗi, sẽ reconnect...")
                        cap = None  # Force reconnect
                    time.sleep(0.1)
                    continue
            except Exception as e:
                print(f"⚠️ Exception khi đọc frame: {e}")
                cap = None  # Force reconnect
                time.sleep(0.5)
                continue

            # Reset reconnect counter khi đọc frame thành công
            reconnect_attempts = 0

            # Add overlay text direct (chỉ mỗi 2 giây thay vì mỗi frame)
            current_time = time.time()
            if not hasattr(self, '_last_overlay_update'):
                self._last_overlay_update = 0
            
            if current_time - self._last_overlay_update >= 1.0:
                self._overlay_text_cached = self._get_overlay_text()
                self._last_overlay_update = current_time
            
            # Dùng cached text
            if hasattr(self, '_overlay_text_cached'):
                overlay_text = self._overlay_text_cached
                lines = overlay_text.split('\n')
                y_offset = 10
                for line in lines:
                    cv2.putText(frame, line, (10, y_offset), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
                    y_offset += 25

            # Write video frame (kiểm tra writer trước - CRITICAL cho segment transition)
            try:
                if current_writer is not None and current_writer.isOpened():
                    current_writer.write(frame)
                elif current_writer is None:
                    # Writer đang trong quá trình transition, skip frame này
                    pass
                else:
                    print("⚠️ VideoWriter không mở được, bỏ qua frame")
            except Exception as e:
                print(f"⚠️ Lỗi ghi frame: {e}")

            # Check if need new segment
            if self.segment_manager.should_start_new():
                segment_time = time.time() - self.segment_manager.segment_start
                print(f"🔄 Bắt đầu segment mới (segment vừa kết thúc: {segment_time:.1f}s)...")
                
                # 1. STOP writing frames temporarily
                old_writer = current_writer
                current_writer = None  # Ngừng ghi frame tạm thời
                print(f"   ↳ Stopped frame writing temporarily")
                
                # 2. Release old writer và đợi file flush
                try:
                    if old_writer and old_writer.isOpened():
                        old_writer.release()
                        print("   ✅ Đã release video writer")
                    time.sleep(1.0)  # Đợi OS flush file ra disk (Pi cần nhiều thời gian)
                except Exception as e:
                    print(f"   ⚠️ Lỗi release writer: {e}")
                
                # 3. Mark video complete
                self.segment_manager.mark_complete('video')
                
                # 4. Đợi audio hoàn thành và ghép file (trong thread riêng để không block)
                merge_thread = threading.Thread(target=lambda: (
                    self.segment_manager.wait_for_merge(timeout=3.0) and self._mux_to_mp4()
                ), daemon=True)
                merge_thread.start()
                
                # 5. Tạo segment mới NGAY (không đợi merge)
                current_segment = self.segment_manager.start_new_segment()
                print(f"   ↳ Segment mới: {os.path.basename(current_segment)}")
                
                # 6. Khởi tạo writer mới TRƯỚC KHI tiếp tục ghi
                try:
                    new_writer = cv2.VideoWriter(
                        f"{current_segment}.avi",
                        cv2.VideoWriter_fourcc(*'XVID'),
                        self.video_fps,
                        (self.video_width, self.video_height)
                    )
                    
                    if not new_writer.isOpened():
                        print("   ⚠️ Không thể mở VideoWriter mới! Thử lại...")
                        time.sleep(0.5)
                        new_writer = cv2.VideoWriter(
                            f"{current_segment}.avi",
                            cv2.VideoWriter_fourcc(*'XVID'),
                            self.video_fps,
                            (self.video_width, self.video_height)
                        )
                        if not new_writer.isOpened():
                            print("   ❌ CRITICAL: Không thể tạo VideoWriter!")
                            cap = None  # Force reconnect camera
                            continue
                    
                    current_writer = new_writer
                    print("   ✅ VideoWriter mới đã sẵn sàng")
                        
                except Exception as e:
                    print(f"   ❌ Lỗi tạo VideoWriter: {e}")
                    cap = None  # Force reconnect camera
                    continue

            time.sleep(1 / self.video_fps)  # Control FPS

        # Final segment - release và flush (với protection)
        print("🛑 Video thread stopping, releasing resources...")
        try:
            if current_writer and current_writer.isOpened():
                current_writer.release()
                print("   ✅ Released final video writer")
                time.sleep(1.0)  # Đợi OS flush file ra disk
            
            self.segment_manager.mark_complete('video')
            
            # Merge final segment trong timeout ngắn
            if self.segment_manager.wait_for_merge(timeout=3.0):
                self._mux_to_mp4()
        except Exception as e:
            print(f"   ⚠️ Lỗi cleanup video writer: {e}")
        
        # Release camera
        try:
            if cap and cap.isOpened():
                cap.release()
                print("   ✅ Released camera")
        except Exception as e:
            print(f"   ⚠️ Lỗi release camera: {e}")
        
        print("✅ Video thread stopped.")

    def start(self):
        # Check if already running
        if hasattr(self, 'hls_process') and self.hls_process and self.hls_process.poll() is None:
            print("⚠️ FFmpeg đang chạy!")
            return

        # Kiểm tra storage
        if hasattr(self, 'usb_manager'):
            if not self.usb_manager.is_available():
                print("⚠️ USB storage không khả dụng!")
                self.led_control.blink(0.5)
                return
            if not self.usb_manager.has_enough_space():
                print("⚠️ Không đủ dung lượng trống!")
                return

        self._stop_flag = False
        print(f"🚀 Bắt đầu ghi video + HLS stream...")
        print(f"   ↳ Segment: {self.segment_seconds}s")
        print(f"   ↳ Output: {self.output_dir}")
        
        # Start FFmpeg (ghi file + HLS stream cùng lúc)
        self._start_hls_stream()
        
        # Bật LED khi bắt đầu
        self.led_control.on()
        print("✅ FFmpeg recording + streaming started")
        
    def is_running(self):
        """Check if FFmpeg is running"""
        return hasattr(self, 'hls_process') and self.hls_process and self.hls_process.poll() is None

    def _led_blink(self):
        """Hàm điều khiển LED nhấp nháy"""
        while self.led_running:
            self.led_control.on()
            time.sleep(0.5)
            self.led_control.off()
            time.sleep(0.5)

    def _start_led_blink(self):
        """Bắt đầu nhấp nháy LED trong thread riêng"""
        self.led_running = True
        self.led_thread = threading.Thread(target=self._led_blink)
        self.led_thread.daemon = True
        self.led_thread.start()

    def _stop_led_blink(self):
        """Dừng nhấp nháy LED"""
        self.led_running = False
        if self.led_thread:
            self.led_thread.join(timeout=1)
        self.led_control.off()

    def stop(self):
        """Stop FFmpeg recording"""
        self._stop_flag = True
        
        if hasattr(self, 'hls_process') and self.hls_process:
            print("⏱ Đang dừng FFmpeg...")
            try:
                # Send quit command to FFmpeg (graceful shutdown)
                self.hls_process.terminate()
                self.hls_process.wait(timeout=10)
                print("   ✅ FFmpeg đã dừng")
            except subprocess.TimeoutExpired:
                print("   ⚠️ FFmpeg không phản hồi, force kill...")
                self.hls_process.kill()
                self.hls_process.wait()
            except Exception as e:
                print(f"   ⚠️ Lỗi dừng FFmpeg: {e}")
        
        # Tắt LED
        self.led_control.off()
        print("✅ Đã dừng recording")

    def cleanup(self):
        """Dừng an toàn FFmpeg và các module phần cứng"""
        print("🧹 Bắt đầu cleanup...")

        # 1️⃣ Set stop flag
        self._stop_flag = True
        time.sleep(0.5)
        
        # 2️⃣ Stop FFmpeg process
        if hasattr(self, 'hls_process') and self.hls_process:
            try:
                print("🎬 Dừng FFmpeg...")
                self.hls_process.terminate()
                self.hls_process.wait(timeout=10)
                print("   ✅ FFmpeg đã dừng")
            except subprocess.TimeoutExpired:
                print("   ⚠️ Timeout, force killing FFmpeg...")
                self.hls_process.kill()
            except Exception as e:
                print(f"   ⚠️ Lỗi dừng FFmpeg: {e}")

        # 3️⃣ Tắt LED
        if hasattr(self, 'led_control'):
            try:
                self.led_control.off()
                print("💡 LED đã tắt")
            except Exception as e:
                print(f"⚠️ Lỗi khi tắt LED: {e}")

        # 4️⃣ Đóng GNSS module
        if hasattr(self, 'gnss') and getattr(self, 'gnss_available', False):
            try:
                self.gnss.close()
                print("📡 GNSS module đã đóng")
            except Exception as e:
                print(f"⚠️ Lỗi khi đóng GNSS: {e}")

        # 5️⃣ Đóng RTC module
        if hasattr(self, 'rtc') and getattr(self, 'rtc_available', False):
            try:
                self.rtc.close()
                print("⏰ RTC module đã đóng")
            except Exception as e:
                print(f"⚠️ Lỗi khi đóng RTC: {e}")

        print("✅ Cleanup hoàn tất")


def signal_handler(signum, frame):
    """Xử lý tín hiệu để thoát an toàn"""
    print("\n🛑 Nhận tín hiệu dừng, đang thoát...")
    if 'recorder' in globals():
        recorder.cleanup()
    sys.exit(0)

if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        recorder = PiStreamer()
        if not recorder.initial():
            print("❌ Khởi tạo thất bại, đang thoát...")
            sys.exit(1)

        recorder.start()  # 🔹 Start FFmpeg recording + HLS stream
        print("📡 HLS stream: http://localhost:5000/hls/stream.m3u8")
        
        # Run Flask app (không cần SocketIO)
        recorder.app.run(host="0.0.0.0", port=5000, debug=False)

    except KeyboardInterrupt:
        print("\n🛑 Đang thoát...")
        recorder.cleanup()
    except Exception as e:
        print(f"❌ Lỗi chương trình: {e}")
        sys.exit(1)