#!/usr/bin/env python3
"""
recorder_ffmpeg.py - Simple recorder using FFmpeg for both file recording and HLS streaming
FIXED VERSION - S·ª≠a l·ªói HLS streaming
UPDATED VERSION - Th√™m overlay timestamp v√† t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i
"""
import os
import sys
import time
import signal
import subprocess
import re
from datetime import datetime
from pathlib import Path
import queue
import threading
import traceback

sys.path.insert(0, str(Path(__file__).parent.parent.parent))

from firmware.hal.usb_manager import USBManager
from firmware.hal.gpio_leds import gpioLed
from firmware.hal.gnss import GNSSModule
from firmware.hal.rtc import rtcModule
from firmware.hal.micro import Micro
from firmware.config.config_loader import load


class FFmpegRecorder:
    """Simple video recorder using FFmpeg"""

    def __init__(self):
        self.config_file = Path(__file__).parent.parent / 'config' / 'device_full.yaml'
        self.config = load(self.config_file)

        # Paths
        self.output_dir = Path(__file__).parent.parent / self.config['paths']['record_root']
        self.hls_dir = "/tmp/picam_hls"
        Path(self.hls_dir).mkdir(parents=True, exist_ok=True)

        # Recording settings
        self.segment_seconds = self.config['storage']['segment_seconds']

        # Hardware
        self.led_control = gpioLed(self.config['gpio'].get('record_led', 26))

        # USB Storage Manager
        self.usb_manager = USBManager(
            path=self.output_dir,
            min_free_gb=self.config['storage'].get('min_free_gb', 1.0),
            min_free_percent=self.config['storage'].get('min_free_percent', 10),
            camera_id=self.config['device'].get('id', 'PICAM')
        )

        # FFmpeg process
        self.ffmpeg_process = None
        self._stop_flag = False

        # Storage monitoring thread
        self._storage_monitor_thread = None

    def _storage_monitor_loop(self):
        """Monitor USB storage and update LED accordingly"""
        while not self._stop_flag and self.is_running():
            if not self.usb_manager.is_available():
                self.led_control.blink(0.3)
                print("‚ö†Ô∏è USB storage disconnected!")
            else:
                self.led_control.on()
            time.sleep(2)

    def get_video_device(self):
        """Find available camera"""
        video_dev = self.config['video'].get('v4l2_device', '/dev/video0')
        if Path(video_dev).exists():
            return video_dev

        for i in range(10):
            dev = f'/dev/video{i}'
            if Path(dev).exists():
                print(f"‚úÖ Found camera: {dev}")
                return dev

        raise Exception("No camera found")

    def get_audio_device(self):
        """Get audio device in ALSA format with supported params"""
        if not self.config['audio'].get('enabled', False):
            print("‚ÑπÔ∏è Audio disabled in config")
            return None

        test_devices = [
            "hw:1,0",
            "plughw:1,0",
            "hw:2,0",
            "plughw:2,0",
        ]

        test_params = [
            {'rate': 44100, 'channels': 2},
            {'rate': 48000, 'channels': 2},
            {'rate': 44100, 'channels': 1},
            {'rate': 48000, 'channels': 1},
        ]

        print("üîç Testing audio devices...")
        for alsa_device in test_devices:
            for params in test_params:
                test_cmd = [
                    'arecord',
                    '-D', alsa_device,
                    '-f', 'S16_LE',
                    '-r', str(params['rate']),
                    '-c', str(params['channels']),
                    '-d', '1',
                    '/tmp/audio_test.wav'
                ]
                try:
                    result = subprocess.run(test_cmd, capture_output=True, timeout=3)
                    if result.returncode == 0:
                        print(f"‚úÖ Audio device verified: {alsa_device} ({params['channels']}ch @ {params['rate']}Hz)")
                        try:
                            Path('/tmp/audio_test.wav').unlink()
                        except:
                            pass
                        return {
                            'device': alsa_device,
                            'rate': params['rate'],
                            'channels': params['channels']
                        }
                except:
                    pass
        print("‚ö†Ô∏è No working audio device found‚Äîfalling back to video-only")
        return None

    def start_recording(self):
        """Start FFmpeg recording + HLS streaming"""
        
        if self.is_running():
            print("‚ö†Ô∏è Already recording")
            return False
        
        # Check storage
        if not self.usb_manager.is_available():
            print("‚ùå USB storage not available")
            self.led_control.blink(0.5)
            return False
        
        if not self.usb_manager.has_enough_space():
            print("‚ö†Ô∏è Low storage space, cleaning up...")
            self.usb_manager.cleanup_old_files()
            if not self.usb_manager.has_enough_space():
                print("‚ùå Not enough storage space")
                return False
        
        # Clear old HLS files
        for f in Path(self.hls_dir).glob("*.ts"):
            try:
                f.unlink()
            except:
                pass
        for f in Path(self.hls_dir).glob("*.m3u8"):
            try:
                f.unlink()
            except:
                pass
        
        # Get devices
        try:
            video_dev = self.get_video_device()
        except Exception as e:
            print(f"‚ùå Device error: {e}")
            return False
        
        # Quick device lock check/kill
        for dev in [video_dev]:
            try:
                if subprocess.run(['fuser', dev], capture_output=True).returncode == 0:
                    print(f"‚ö†Ô∏è Device {dev} in use‚Äîkilling processes")
                    subprocess.run(['fuser', '-k', dev])
            except:
                pass
        
        # Parse video settings
        video_size = self.config['video']['v4l2_format']
        video_fps = self.config['video']['v4l2_fps']
        
        # Build FFmpeg command
        cmd = [
            'ffmpeg',
            '-f', 'v4l2',
            '-input_format', 'yuyv422',
            '-video_size', video_size,
            '-framerate', str(video_fps),
            '-i', video_dev,
            '-fflags', 'nobuffer',
            '-flags', 'low_delay',
        ]
        
        ## ‚óÄÔ∏è TH√äM M·ªöI: Logic t√¨m ph√¥ng ch·ªØ cho timestamp
        # T√¨m m·ªôt ph√¥ng ch·ªØ. C√†i ƒë·∫∑t 'fonts-dejavu-core' n·∫øu kh√¥ng c√≥
        font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf"
        if not Path(font_path).exists():
            font_path = "/usr/share/fonts/truetype/freefont/FreeSans.ttf" # Fallback
            if not Path(font_path).exists():
                print("‚ö†Ô∏è WARNING: Kh√¥ng t√¨m th·∫•y ph√¥ng ch·ªØ. Overlay timestamp c√≥ th·ªÉ th·∫•t b·∫°i.")
                print("  ‚Ü≥ Th·ª≠ c√†i ƒë·∫∑t: sudo apt-get install fonts-dejavu-core")
                font_path = "default" # ƒê·ªÉ FFmpeg t·ª± th·ª≠

        # ƒê·ªãnh d·∫°ng timestamp, l∆∞u √Ω \\: ƒë·ªÉ escape d·∫•u : cho FFmpeg
        timestamp_format = '%{localtime\\:%Y-%m-%d %H\\:%M\\:%S}'
        
        filter_string = (
            f"scale=640:480:flags=bicubic,"
            f"drawtext=fontfile='{font_path}':"
            f"text='%{{localtime\\:%Y-%m-%d %H\\\\:%M\\\\:%S}}':"
            f"fontcolor=white:fontsize=20:box=1:boxcolor=black@0.5:"
            f"boxborderw=5:x=(w-text_w-10):y=10,"
            f"format=yuv420p"
        )
        ## ‚óÄÔ∏è K·∫æT TH√öC THAY ƒê·ªîI
        
        # Video codec settings
        cmd.extend([
            '-vf', filter_string,
            '-c:v', 'libx264',
            '-preset', 'ultrafast',  # Thay ƒë·ªïi t·ª´ veryfast ‚Üí ultrafast cho streaming
            '-tune', 'zerolatency',
            '-profile:v', 'baseline',  # Thay ƒë·ªïi t·ª´ main ‚Üí baseline (t∆∞∆°ng th√≠ch t·ªët h∆°n)
            '-level', '3.0',
            '-g', str(video_fps * 2),
            '-keyint_min', str(video_fps),
            '-sc_threshold', '0',
            '-b:v', '800k',  # Gi·∫£m bitrate cho streaming m∆∞·ª£t h∆°n
            '-maxrate', '1000k',
            '-bufsize', '2000k',
            '-pix_fmt', 'yuv420p',
        ])
        
        # Tee muxer setup
        start_time = datetime.now().strftime("%Y%m%d_%H%M%S")
        timestamp_pattern = f"{self.output_dir}/{start_time}_cam0_%03d.mp4"
        
        cmd.extend([
            '-f', 'tee',
            '-map', '0:v',
        ])
        
        # ‚úÖ FIX: Tee output v·ªõi c·∫•u h√¨nh HLS t·ªëi ∆∞u
        tee_output = (
            f"[f=segment:segment_time={self.segment_seconds}:segment_format=mp4:"
            f"segment_start_number=0:"
            f"reset_timestamps=1:segment_list_flags=live]{timestamp_pattern}|"  # <-- ƒê√É S·ª¨A: X√≥a strftime=1
            f"[f=hls:hls_time=2:hls_list_size=5:"
            f"hls_flags=delete_segments+independent_segments+append_list:"
            f"hls_segment_type=mpegts:start_number=0:"
            f"hls_allow_cache=0:"
            f"hls_segment_filename={self.hls_dir}/segment_%03d.ts]{self.hls_dir}/stream.m3u8"
        )
        
        cmd.append(tee_output)
        
        print(f"üé¨ Starting FFmpeg recording...")
        print(f"  ‚Ü≥ Video: {video_dev} ({video_size} @ {video_fps}fps)")
        print(f"  ‚Ü≥ Output: {self.output_dir}/*.mp4")
        print(f"  ‚Ü≥ HLS: {self.hls_dir}/stream.m3u8")
        print(f"  ‚Ü≥ Segment: {self.segment_seconds}s")
        
        try:
            # Log command for debugging
            cmd_str = ' '.join(cmd)
            print(f"  ‚Ü≥ Command: {cmd_str[:200]}...")
            
            self.ffmpeg_process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                stdin=subprocess.DEVNULL,
                universal_newlines=True,
                bufsize=1
            )
            
            print(f"‚úÖ FFmpeg started (PID: {self.ffmpeg_process.pid})")
            
            # Enhanced monitoring with queue
            output_queue = queue.Queue()
            def monitor_ffmpeg():
                try:
                    for line in iter(self.ffmpeg_process.stdout.readline, ''):
                        output_queue.put(line)
                        lower_line = line.lower()
                        # ‚úÖ FIX 5: Log HLS-specific errors
                        if any(word in lower_line for word in ['error', 'failed', 'no such device', 
                                                               'invalid argument', 'ioctl', 
                                                               'demuxing', 'hls', 'segment']):
                            print(f"‚ö†Ô∏è FFmpeg: {line.strip()}")
                except:
                    pass
            
            monitor_thread = threading.Thread(target=monitor_ffmpeg, daemon=True)
            monitor_thread.start()
            
            # Drain output
            def drain_output():
                while self.is_running():
                    try:
                        line = output_queue.get(timeout=1)
                        # Uncomment ƒë·ªÉ xem full log: print(line.strip())
                    except queue.Empty:
                        continue
            
            drain_thread = threading.Thread(target=drain_output, daemon=True)
            drain_thread.start()
            
            # Storage monitor
            self._storage_monitor_thread = threading.Thread(target=self._storage_monitor_loop, daemon=True)
            self._storage_monitor_thread.start()
            
            # Wait for FFmpeg to start
            time.sleep(3)  # TƒÉng t·ª´ 2‚Üí3s cho USB init
            
            if self.ffmpeg_process.poll() is not None:
                print(f"‚ùå FFmpeg exited early: code {self.ffmpeg_process.returncode}")
                return False
            
            # ‚úÖ FIX 6: Verify HLS files created
            time.sleep(2)
            if not Path(f"{self.hls_dir}/stream.m3u8").exists():
                print(f"‚ö†Ô∏è Warning: stream.m3u8 not created yet")
            else:
                print(f"‚úÖ HLS playlist created successfully")
            
            self.led_control.on()
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to start FFmpeg: {e}")
            traceback.print_exc()
            return False

    def stop_recording(self):
        """Stop FFmpeg recording"""
        if not self.is_running():
            return

        print("‚è± Stopping FFmpeg...")

        self._stop_flag = True

        try:
            self.ffmpeg_process.terminate()
            self.ffmpeg_process.wait(timeout=10)
            print("  ‚úÖ FFmpeg stopped")
        except subprocess.TimeoutExpired:
            print("  ‚ö†Ô∏è Timeout, force killing...")
            self.ffmpeg_process.kill()
            self.ffmpeg_process.wait()
        except Exception as e:
            print(f"  ‚ö†Ô∏è Error stopping FFmpeg: {e}")

        self.ffmpeg_process = None
        self.led_control.off()
        print("  üí° LED off")

    def is_running(self):
        """Check if FFmpeg is running"""
        return (self.ffmpeg_process is not None and
                self.ffmpeg_process.poll() is None)

    def cleanup(self):
        """Cleanup resources"""
        print("üßπ Cleanup...")
        self.stop_recording()
        print("‚úÖ Cleanup complete")


# Global recorder instance
recorder = None

def signal_handler(signum, frame):
    """Handle shutdown signals"""
    print("\nüõë Shutting down...")
    if recorder:
        recorder.cleanup()
    sys.exit(0)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        recorder = FFmpegRecorder()

        if recorder.start_recording():
            print(f"üì° HLS stream available at: {recorder.hls_dir}/stream.m3u8")
            print("  ‚Ü≥ Test with: ffplay /tmp/picam_hls/stream.m3u8")
            print("  ‚Ü≥ Or web browser: http://your-pi-ip/live")
            
            # ‚óÄÔ∏è ‚óÄÔ∏è ‚óÄÔ∏è THAY ƒê·ªîI: Th√™m v√≤ng l·∫∑p t·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i ‚óÄÔ∏è ‚óÄÔ∏è ‚óÄÔ∏è
            while True:
                if not recorder.is_running():
                    print("‚ö†Ô∏è FFmpeg process stopped unexpectedly! Restarting in 5s...")
                    recorder.cleanup()  # D·ªçn d·∫πp ti·∫øn tr√¨nh c≈©
                    time.sleep(5)
                    
                    # C·∫≠p nh·∫≠t l·∫°i _stop_flag tr∆∞·ªõc khi kh·ªüi ƒë·ªông l·∫°i
                    recorder._stop_flag = False 
                    
                    if not recorder.start_recording():
                        print("‚ùå Failed to restart recording. Exiting.")
                        sys.exit(1)
                    else:
                        print("‚úÖ FFmpeg restarted successfully.")
                
                time.sleep(2) # Ki·ªÉm tra tr·∫°ng th√°i m·ªói 2 gi√¢y
            # ‚óÄÔ∏è ‚óÄÔ∏è ‚óÄÔ∏è K·∫æT TH√öC THAY ƒê·ªîI ‚óÄÔ∏è ‚óÄÔ∏è ‚óÄÔ∏è
            
        else:
            print("‚ùå Failed to start recording")
            sys.exit(1)

    except KeyboardInterrupt:
        print("\nüõë Keyboard interrupt")
        if recorder:
            recorder.cleanup()
    except Exception as e:
        print(f"‚ùå Error: {e}")
        traceback.print_exc()
        sys.exit(1)