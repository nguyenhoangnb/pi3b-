import sounddevice as sd
import numpy as np
import wave


class Micro:
    def __init__(self, alsa_device=None, sample_rate=48000):
        """
        alsa_device: t√™n ho·∫∑c index thi·∫øt b·ªã (vd: 'USB Audio Device' ho·∫∑c 2)
        """
        self.device = alsa_device
        self.sample_rate = sample_rate
        self.channels = 1
        self.recording = None

    def check_device_available(self) -> bool:
        """Ki·ªÉm tra xem thi·∫øt b·ªã micro c√≥ t·ªìn t·∫°i kh√¥ng."""
        devices = sd.query_devices()
        if self.device is None:
            print("‚ÑπÔ∏è Kh√¥ng ch·ªâ ƒë·ªãnh thi·∫øt b·ªã, s·∫Ω d√πng thi·∫øt b·ªã m·∫∑c ƒë·ªãnh.")
            return True

        for d in devices:
            if isinstance(self.device, int):
                if devices.index(d) == self.device:
                    print(f"‚úÖ Thi·∫øt b·ªã micro #{self.device}: {d['name']}")
                    return True
            elif self.device.lower() in d['name'].lower():
                print(f"‚úÖ T√¨m th·∫•y thi·∫øt b·ªã micro: {d['name']}")
                return True

        print(f"‚ùå Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã micro: {self.device}")
        print("üîç Danh s√°ch thi·∫øt b·ªã kh·∫£ d·ª•ng:")
        for i, d in enumerate(devices):
            print(f"  [{i}] {d['name']}")
        return False

    def record(self, duration=5):
        """Ghi √¢m trong N gi√¢y."""
        if not self.check_device_available():
            raise RuntimeError(f"Micro '{self.device}' kh√¥ng kh·∫£ d·ª•ng.")
        print(f"üé§ ƒêang ghi √¢m {duration}s t·ª´ thi·∫øt b·ªã {self.device or 'default'}...")
        self.recording = sd.rec(
            int(duration * self.sample_rate),
            samplerate=self.sample_rate,
            channels=self.channels,
            dtype='int16',
            device=self.device
        )
        sd.wait()
        print("‚úÖ Ho√†n t·∫•t ghi √¢m.")
        return self.recording

    def save(self, path="output.wav"):
        """L∆∞u d·ªØ li·ªáu √¢m thanh ra file WAV."""
        if self.recording is None:
            raise RuntimeError("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u.")
        print(f"üíæ ƒêang l∆∞u v√†o {path} ...")
        with wave.open(path, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(2)
            wf.setframerate(self.sample_rate)
            wf.writeframes(self.recording.tobytes())
        print("‚úÖ L∆∞u th√†nh c√¥ng.")
